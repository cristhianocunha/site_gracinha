user nginx;
worker_processes auto; # Usa todos os cores disponíveis

error_log /var/log/nginx/error.log warn; # Logs de erro mais específicos
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on; # Aceita múltiplas conexões de uma vez
    use epoll; # Método eficiente para Linux
}

http {
    # Configurações Básicas e de Performance
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off; # IMPORTANTE: Esconde a versão do Nginx

    # Logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /dev/stdout main;
    error_log /dev/stderr warn;

    # Configurações de Segurança Básicas em todos os sites
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Limites para previnir ataques
    client_max_body_size 10M; # Ajuste conforme necessidade

    # Servidor para HTTP (porta 80)
    server {
        listen 80;
        server_name _; # Responde para qualquer domínio

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Configuração principal para o SPA
        location / {
            try_files $uri $uri/ /index.html =404;
        }

        # Bloqueia acesso a arquivos ocultos (como .env, .git)
        location ~ /\. {
            deny all;
            return 404;
        }

        # Configuração de cache para arquivos estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2|ttf)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Retorna 404 para tentativas de acessar .php
        location ~ \.php$ {
            return 404;
        }

        # Health Check simples
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}